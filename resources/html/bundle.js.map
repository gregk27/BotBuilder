{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./resources/html/scripts/inputManager.ts","webpack:///./resources/html/scripts/inputLine.ts","webpack:///./resources/html/scripts/inputValidator.ts","webpack:///./resources/html/scripts/common.ts","webpack:///./resources/html/scripts/parameterSelector.ts"],"names":[],"mappings":"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","file":"bundle.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 0);\n","import { InputLine } from \"./inputLine\";\r\nimport { ParameterSelector, HardwareParameter } from \"./parameterSelector\";\r\nimport { webview } from \"./common\";\r\n\r\ndeclare global {\r\n    interface Window {\r\n        /**\r\n         * Holding array for parameter selectors\r\n         */\r\n        inputs: InputLine[];\r\n        /**\r\n         * Holding array for parameter selectors\r\n         */\r\n        parameterSelectors: ParameterSelector[];\r\n        /**\r\n         * Function to validate inputs\r\n         */\r\n        validate: ()=>boolean;\r\n        /**\r\n         * Function to get data from inputs\r\n         */\r\n        getData: ()=>webview.InputState[];\r\n        /**\r\n         * Function to send a message to the backend\r\n         */\r\n        sendMessage: (message:webview.Message)=>void;\r\n\r\n        [key:string]: any;\r\n    }\r\n}\r\n\r\nwindow.inputs = [];\r\nwindow.parameterSelectors = [];\r\n\r\n// Load inputs\r\nwindow.addEventListener(\"load\", (event)=>{\r\n    for(let e of Array.from(document.getElementsByClassName(\"inputLine\"))){\r\n        window.inputs.push(new InputLine(<HTMLElement> e));\r\n    }\r\n    for(let e of Array.from(document.getElementsByClassName(\"parameterSelector\"))){\r\n        // Instantiate ParameterSelector using a type attached to the window\r\n        window.parameterSelectors.push(new ParameterSelector(<HTMLElement> e, window.parameterSelectors.length, window[e.getAttribute(\"data-param-class\")].prototype.constructor));\r\n        console.log(\"Added parameter\");\r\n        console.log(window.parameterSelectors);\r\n    }\r\n});\r\n\r\n\r\n// No typings available for frontend api, this is a hack-job spoof for typechecking\r\ndeclare var acquireVsCodeApi: any;\r\n\r\n\r\n// This setup is used to keep vscode api private for security\r\n(function(){\r\n    const vscode = acquireVsCodeApi();\r\n\r\n    window.sendMessage = (message:webview.Message)=>{\r\n        vscode.postMessage(message);\r\n    };\r\n}());\r\n\r\nlet saveState = ()=>{\r\n    console.log(\"Saving state\");\r\n    window.sendMessage({\r\n        id:'update',\r\n        payload: window.getData()\r\n    });\r\n};\r\nwindow.addEventListener(\"keyup\", saveState);\r\n//Put timeout after mouseup so event can register before saving\r\nwindow.addEventListener(\"mouseup\", ()=>setTimeout(saveState, 50));\r\n\r\n\r\nwindow.addEventListener('message', message=>{\r\n    let data = <webview.Message> message.data;\r\n    if(data.id === \"setState\"){\r\n        console.log(\"Setting state:\");\r\n        let payload = <webview.InputState[]> data.payload;\r\n        console.log(payload);\r\n        for(let p of payload){\r\n            if(p.dataType === webview.InputType.INPUT_LINE){\r\n                for(let i of window.inputs){\r\n                    if(p.id === i.input.id){\r\n                        i.fromState(p);\r\n                        break;\r\n                    }\r\n                }\r\n            } else if (p.dataType === webview.InputType.PARAMETER_SELECTOR){\r\n                for(let a of window.parameterSelectors){\r\n                    if(p.id === a.root.id){\r\n                        a.fromState(p);\r\n                        break;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n});\r\n\r\n\r\nwindow.validate = ()=>{\r\n    let valid = true;\r\n    for(let i of window.inputs){\r\n        valid = i.validate(true) && valid;\r\n    }\r\n    for(let a of window.parameterSelectors){\r\n        valid = a.validate() && valid;\r\n    }\r\n    return valid;\r\n};\r\n\r\n// Collect data from inputs into a JSON object\r\nwindow.getData = ()=>{\r\n    let data = [];\r\n    for(let i of window.inputs){\r\n        data.push(i.getState());\r\n    }\r\n    for(let a of window.parameterSelectors){\r\n        data.push(a.getState());\r\n    }\r\n    return data;\r\n};\r\n","import { InputValidator, RegexTest, EmptyTest } from \"./inputValidator\";\r\nimport { webview } from \"./common\";\r\n\r\nconst dataPattern = new RegExp(/^data-filter-(\\w+)-(\\w+)/g);\r\n\r\nexport class InputLine implements webview.Persistent{\r\n\r\n    validator:InputValidator;\r\n\r\n    /** The `.msg` element containing notification text */\r\n    notif:HTMLElement;\r\n    /** The input element */\r\n    input:HTMLInputElement;\r\n    /** The `input[type=checkbox]` for overrideing disabled inputs */\r\n    override:HTMLInputElement;\r\n    /** Button to reset input to inital value */\r\n    resetButton:HTMLButtonElement;\r\n\r\n    /** The inital value of the input */\r\n    initialValue:string;\r\n\r\n\r\n    /**\r\n     * Create a new input manager, from a `.inputGroup` element\r\n     * \r\n     * @param e \r\n     */\r\n    constructor(e:HTMLElement){\r\n        this.validator = new InputValidator(e, null);\r\n\r\n        // Get DOM elements\r\n        this.notif = e.querySelector(\".notif .msg\");\r\n        this.input = e.querySelector(\".input\");\r\n        this.override = e.querySelector(\".enable input[type=checkbox]\");\r\n        this.resetButton = e.querySelector(\"button.reset\");\r\n\r\n        // Get filters\r\n        let match: RegExpExecArray;\r\n        for(let a of Array.from(e.attributes)){\r\n            // If the attribute is a filter attirbute\r\n            dataPattern.lastIndex=0;\r\n            if((match=dataPattern.exec(a.name))!==null){\r\n                console.log(match);\r\n                if(this.validator.tests[match[1]] === undefined){\r\n                    this.validator.tests[match[1]] = new RegexTest(\".input\", null, null, null);\r\n                }\r\n                if(match[2] === \"regex\"){\r\n                    (<RegexTest> this.validator.tests[match[1]]).regex = new RegExp(a.value);\r\n                }\r\n                if(match[2] === \"message\"){\r\n                    this.validator.tests[match[1]].message = a.value;\r\n                }\r\n                if(match[2] === \"level\"){\r\n                    this.validator.tests[match[1]].level = Number.parseInt(a.value);\r\n                }\r\n            } else if(a.name === \"data-verifier-noempty\"){\r\n                this.validator.emptyTest = new EmptyTest(\".input\", \"\");\r\n            }\r\n        }\r\n\r\n        // Map override\r\n        if(this.override !== null){\r\n            if(this.input.disabled){\r\n                this.override.checked = false;\r\n            } else {\r\n                this.override.checked = true;\r\n            }\r\n\r\n            this.override.onchange = ()=>{\r\n                this.input.disabled = !this.override.checked;\r\n            };\r\n        }\r\n\r\n        this.initialValue = this.input.value;\r\n        this.input.oninput = ()=>{\r\n            this.validate(false);\r\n        };\r\n\r\n        if(this.resetButton !== null){\r\n            this.resetButton.onclick = ()=>{\r\n                this.input.value = this.initialValue;\r\n                this.validate(false);\r\n            };\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Execute all filters and get result\r\n     * Note: Filters with level > 10 will yield true\r\n     * \r\n     * @param checkEmpty If true, will run empty check (if `this.noEmpty` is true)\r\n     * @return Boolean if test passed\r\n     */\r\n    validate(checkEmpty:boolean) {\r\n        // Currently validation only works for text inputs\r\n        if(this.input.type !== \"text\"){ return true;}\r\n\r\n        return this.validator.validate(checkEmpty);\r\n    }\r\n\r\n    fromState(data: webview.InputState): void {\r\n        if(data.dataType === webview.InputType.INPUT_LINE && this.input.id === data.id){\r\n            if(typeof(data.data) === \"boolean\"){\r\n                this.input.checked = data.data;\r\n            } else {\r\n                this.input.value = data.data;\r\n            }\r\n            if(data.data !== this.initialValue && this.override !== null){\r\n                this.override.checked = true;\r\n                this.input.disabled = false;\r\n            }\r\n        }\r\n    }\r\n\r\n    getState():webview.InputState {\r\n        let data:any;\r\n        if(this.input.type === \"checkbox\"){\r\n            data=this.input.checked;\r\n        } else {\r\n            data = this.input.value;\r\n        }\r\n        return {id:this.input.id, dataType:webview.InputType.INPUT_LINE, data};\r\n    }\r\n}\r\n","\r\nexport class InputValidator {\r\n        \r\n    /** Tests executed on validation */\r\n    tests:{[name:string]:InputTest};\r\n    /** Test to execute to check for empty input */\r\n    emptyTest: InputTest;\r\n    /** The root element */\r\n    root:HTMLElement;\r\n    /** The `.msg` element containing notification text */\r\n    notif:HTMLElement;\r\n\r\n    /**\r\n     * Create a new input manager, from an element with the following children:\r\n     * \r\n     *  - `.notif` The error message element, with a `.msg` child\r\n     * \r\n     * @param e The base element\r\n     * @param emptyTest Test to execute to check for empty input. If null empty check will be skipped.\r\n     */\r\n    constructor(e:HTMLElement, emptyTest:InputTest){\r\n        if(e !== null){\r\n            this.update(e);\r\n        }\r\n\r\n        this.tests = {};\r\n        this.emptyTest = emptyTest;\r\n    }\r\n\r\n    /**\r\n     * Update element references\r\n     * \r\n     * @param e The base element\r\n     */\r\n    update(e: HTMLElement){\r\n  \r\n        this.root = e;\r\n        this.notif = e.querySelector(\".notif .msg\");\r\n    }\r\n\r\n    /**\r\n     * Add a new test\r\n     * @param name The test name\r\n     * @param test The test to add\r\n     * @return This, to allow for chaining statements\r\n     */\r\n    addTest(name:string, test: InputTest):InputValidator{\r\n        this.tests[name] = test;\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Execute all filters and get result\r\n     * Note: Filters with level > 10 will yield true\r\n     * \r\n     * @param checkEmpty If true, will run empty check (if `this.noEmpty` is true)\r\n     * @return Boolean if test passed\r\n     */\r\n    validate(checkEmpty:boolean){\r\n        if(checkEmpty && this.emptyTest !== null){\r\n            if(!this.runTest(this.emptyTest)){\r\n                this.setNotif(this.emptyTest.message, this.emptyTest.level);\r\n                return false;\r\n            }\r\n        }\r\n\r\n        let result = true;\r\n        let notif = \"\";\r\n        let level = -1;\r\n\r\n        for(let t of Object.values(this.tests)){\r\n            if(!this.runTest(t)){\r\n                if(t.level >= 20){\r\n                    result = false;\r\n                }\r\n                if (t.level === level){\r\n                    notif += \"\\n\" + t.message;\r\n                } else if(t.level > level){\r\n                    notif = t.message;\r\n                    level = t.level;\r\n                }\r\n            }\r\n        }\r\n        if(level !== -1){\r\n            this.setNotif(notif, level);\r\n        } else {\r\n            this.clearNotif();\r\n        }\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * Execute a test\r\n     * @param test The test to run \r\n     * @returns Boolean indicating if test passed\r\n     */\r\n    runTest(test:InputTest):boolean{\r\n        if(test.selector === \"root\"){\r\n            return test.exec(this.root);\r\n        }\r\n        return test.exec(this.root.querySelector(test.selector));\r\n    }\r\n\r\n    /**\r\n     * Set the notification message and level\r\n     */\r\n    setNotif(msg:string, level:number){\r\n        this.notif.innerText = msg;\r\n        if(level >= 20){\r\n            this.notif.parentElement.className = \"notif err\";\r\n        } else if (level >= 10 && level < 20){\r\n            this.notif.parentElement.className = \"notif warn\";\r\n        } else {\r\n            this.notif.parentElement.className = \"notif\";\r\n        }\r\n        this.notif.parentElement.style.display = \"initial\";\r\n    }\r\n\r\n    /**\r\n     * Clear the notification\r\n     */\r\n    clearNotif(){\r\n        this.notif.parentElement.style.display = \"none\";\r\n    }\r\n}\r\n\r\nexport abstract class InputTest {\r\n\r\n    /**\r\n     * Create a new input test\r\n     * @param selector \r\n     * @param level \r\n     */\r\n    constructor(\r\n        /**\r\n         * Selector used to pick test element\r\n         * @remarks `root` will pass the root element \r\n         */\r\n        public selector: string,\r\n        /**\r\n         * The test's error message\r\n         */\r\n        public message: string,\r\n        /**\r\n         * The error level of the test\r\n         */\r\n        public level: number) {\r\n\r\n    }\r\n\r\n    /**\r\n     * Execute the test\r\n     * @param e Element as specified by `this.selector` \r\n     * @returns Boolean indicating if test passed\r\n     */\r\n    abstract exec(e: HTMLElement):boolean;\r\n\r\n}\r\n\r\nexport class RegexTest extends InputTest {\r\n    \r\n    regex:RegExp;\r\n\r\n    /**\r\n     * Create a new test build around a regular epression\r\n     * \r\n     * @param selector Selector used to pick test element, `root` will yeild the root element \r\n     * @param message The error message on fail\r\n     * @param level The error level\r\n     * @param regex The regular expression to check against\r\n     */\r\n    constructor(selector:string, message:string, level:number, regex:RegExp){\r\n        super(selector, message, level);\r\n        this.regex = regex;\r\n    }\r\n\r\n    exec(e:HTMLInputElement){\r\n        this.regex.lastIndex = 0;\r\n        return(this.regex.test(e.value));\r\n    }\r\n}\r\n\r\nexport class EmptyTest extends InputTest {\r\n\r\n    empty:string;\r\n\r\n    /**\r\n     * Create a new test to check if element is empty\r\n     * \r\n     * @param selector The selector to get the input element\r\n     * @param empty The empty value\r\n     * @param message The error message on fail\r\n     */\r\n    constructor(selector:string, empty=\"\", message=\"Cannot be empty\"){\r\n        super(selector, message, 30);\r\n        this.empty = empty;\r\n    }\r\n\r\n    exec(e: HTMLInputElement){\r\n        return(e.value !== this.empty);\r\n    }\r\n}","export namespace webview {\r\n    /** Template for messages with frontened */\r\n    export interface Message {\r\n        id:string;\r\n        payload:any\r\n    }\r\n\r\n    /**\r\n     * General interface used to exporting/importing data\r\n     */\r\n    export interface InputState {\r\n        /** Id of the respective HTML element (will vary by type) */\r\n        id:string;\r\n        /** The type of data included */\r\n        dataType:InputType;\r\n        /** The data payload */\r\n        data:any;\r\n    }\r\n\r\n    /**\r\n     * Enum used to differentiate between data types\r\n     */\r\n    export enum InputType {\r\n        /** Data is from an input line */\r\n        INPUT_LINE = \"InputLine\",\r\n        /** Data is from an parameter selector */\r\n        PARAMETER_SELECTOR = \"ParameterSelector\"\r\n    }\r\n\r\n    /**\r\n     * Interface for inputs which have persistent state\r\n     */\r\n    export interface Persistent {\r\n        /**\r\n         * Set state from DataVal;\r\n         */\r\n        fromState(data:webview.InputState):void;\r\n        /**\r\n         * Called to export state to DataVal\r\n         */\r\n        getState():webview.InputState;\r\n    }\r\n}","/// <reference lib=\"dom\" />\r\nimport { InputValidator, EmptyTest, InputTest, RegexTest } from \"./inputValidator\";\r\nimport { webview } from \"./common\";\r\n\r\nconst JAVA_PRIMITIVES:ParameterItem.Type[] = [];\r\n\r\nexport class ParameterSelector implements webview.Persistent{\r\n    \r\n    /** The `.parameterSelector` element */\r\n    root: HTMLElement;\r\n   \r\n    /** The index in holding array */\r\n    index: number;\r\n    /** Button used to add new parameter */\r\n    addButton: HTMLButtonElement;\r\n    /** Parameters for construtor, in order */\r\n    parameters: ParameterItem[];\r\n    /** Child HTML elements */\r\n    children: HTMLCollection;\r\n\r\n    /** The constructor used to create parameters */\r\n    paramType: new (parent:ParameterSelector) => ParameterItem;\r\n\r\n    /**\r\n     * Create a new ParameterSelector from a `.parameterSelector` element\r\n     * \r\n     * @param rootElement The `.parameterSelector` element\r\n     * @param index The index in holding array\r\n     * @param paramType The type used for parameters\r\n     */\r\n    constructor(rootElement:HTMLElement, index:number, paramType: new (parent:ParameterSelector) => ParameterItem){\r\n        this.root = rootElement;\r\n        this.index = index;\r\n        this.paramType = paramType;\r\n        \r\n        this.addButton = <HTMLButtonElement> rootElement.getElementsByClassName(\"addParameter\")[0];\r\n\r\n\r\n        this.parameters = [];\r\n\r\n        this.addButton.onclick = () => {\r\n            this.parameters.push(new paramType(this));\r\n            this.refresh();\r\n        };\r\n        this.refresh();\r\n    }\r\n\r\n    /**\r\n     * Update the html\r\n     */\r\n    refresh(){\r\n        let html = \"\";\r\n        for(let i=0; i<this.parameters.length; i++){\r\n            html += this.parameters[i].getHTML(i);\r\n        }\r\n        this.root.getElementsByClassName(\"params\")[0].innerHTML = html;\r\n\r\n        this.children = this.root.getElementsByClassName(\"param\");\r\n        for(let i=0; i<this.children.length; i++){\r\n            this.parameters[i].update(<HTMLElement> this.children.item(i));\r\n            this.parameters[i].validator.validate(false);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Remove an parameter\r\n     * @param index The index of the parameter \r\n     */\r\n    removeParam(index: number){\r\n        this.parameters.splice(index, 1);\r\n        this.refresh();\r\n    }\r\n\r\n    /**\r\n     * Set the type of a particular parameter\r\n     * \r\n     * @param index The index of the parameter\r\n     * @param selector `select` element with type\r\n     */\r\n    setType(index:number, selector:HTMLInputElement){\r\n        this.parameters[index].type = selector.value;\r\n        console.log(this.parameters);\r\n    }\r\n\r\n    /**\r\n     * Set a property of a particular parameter\r\n     * \r\n     * @param index The index of the parameter \r\n     * @param id The ID for the property\r\n     * @param value The value for the property\r\n     */\r\n    setProperty(index:number, id:string, value:any){\r\n        this.parameters[index].setProperty(id, value);\r\n    }\r\n\r\n    /**\r\n     * Check that parameters are valid\r\n     */\r\n    validate():boolean{\r\n        let res = true;\r\n        for(let p of this.parameters){\r\n            res = res && p.validator.validate(true);\r\n        }\r\n        return res;\r\n    }\r\n\r\n    /**\r\n     * Called while an parameter is being dragged\r\n     * \r\n     * @param yPosition The current y position of the actively dragged parameter\r\n     * @param active Actively dragged parameter\r\n     * @reutrns The position in the array the dragged parameter would be dropped in\r\n     */\r\n    onDrag(yPosition:number, active:ParameterItem){\r\n        let tmpChildren = <HTMLElement[]> Array.from(this.children);\r\n        let activeIdx = this.parameters.indexOf(active);\r\n        tmpChildren.splice(activeIdx, 1);\r\n\r\n        /** Style to be used for active border */\r\n        const borderStyle = \"2px solid white\";\r\n        /** Value to return, the position in the array the dragged parameter would be dropped in */\r\n        let retVal = -1;\r\n        for(let i=0; i<tmpChildren.length; i++){\r\n            let c = tmpChildren[i];\r\n            c.style.border = \"none\";\r\n            if(i === 0 && yPosition < c.offsetTop) {\r\n                c.style.borderTop = borderStyle;\r\n                retVal = 0;\r\n            } else if (i === tmpChildren.length-1 && yPosition > c.offsetTop){\r\n                c.style.borderBottom = borderStyle;\r\n                // Return the insert index, if this is after the removed item, the increment by one\r\n                retVal = i + 1;\r\n            } else if (yPosition > c.offsetTop && yPosition < tmpChildren[i+1].offsetTop){\r\n                c.style.borderBottom = borderStyle;\r\n                // Return the insert index, if this is after the removed item, the increment by one\r\n                retVal = i+1;// + (i>=activeIdx ? 1:0);\r\n            }\r\n        }\r\n        return retVal;\r\n    }\r\n\r\n    /**\r\n     * Called when the dragged parameter is dropped\r\n     * This will reorder the parameters to reflect change\r\n     * \r\n     * @param yPosition The current y position of the actively dragged parameter\r\n     * @param active The actively dragged parameter\r\n     */\r\n    onDrop(yPosition:number, active:ParameterItem){\r\n        let pos = this.onDrag(yPosition, active);\r\n        console.log(pos);\r\n\r\n        let a = this.parameters.splice(this.parameters.indexOf(active), 1);\r\n        let b = this.parameters.splice(pos);\r\n\r\n        this.parameters = [...this.parameters, ...a, ...b];\r\n        this.refresh();\r\n    }\r\n\r\n    \r\n    fromState(data: webview.InputState): void {\r\n        console.log(data);\r\n        if(data.dataType === webview.InputType.PARAMETER_SELECTOR && this.root.id === data.id){\r\n            this.parameters = [];\r\n            for(let d of data.data){\r\n                let p = new this.paramType(this);\r\n                p.fromState(d);\r\n                this.parameters.push(p);\r\n            }\r\n            this.refresh();\r\n        }\r\n    }\r\n\r\n    getState():webview.InputState {\r\n        let out:webview.InputState = {\r\n            id:this.root.id,\r\n            dataType:webview.InputType.PARAMETER_SELECTOR,\r\n            data:[]\r\n        };\r\n        for(let p of this.parameters){\r\n            out.data.push(p.getState());\r\n        }\r\n        return out;\r\n    }\r\n\r\n}\r\n\r\nabstract class ParameterItem {\r\n    \r\n    parent: ParameterSelector;\r\n    parentIndex: number;\r\n    typeData: ParameterItem.TypeData;\r\n\r\n    type: string;\r\n    includePrimitives:boolean = false;\r\n\r\n    validator:InputValidator;\r\n\r\n    root: HTMLElement;\r\n    dragger: HTMLElement;\r\n\r\n    /**\r\n     * Create a new parameter item\r\n     * \r\n     * @param parent The parent ParameterSelector\r\n     * @param validator The input validator to be used \r\n     * \r\n     */\r\n    constructor(parent:ParameterSelector, validator:InputValidator=null, typeData: ParameterItem.TypeData){\r\n        this.parent = parent;\r\n        this.parentIndex = parent.index;\r\n        this.validator = validator;\r\n        this.typeData = typeData;\r\n\r\n        this.type = this.typeData[Object.keys(this.typeData)[0]][0].descriptor;\r\n    }\r\n\r\n    /**\r\n     * Get the HTML string for the selector object\r\n     * \r\n     * @param index The index in the parameters array\r\n     * @param data The data used in constructing the selector, in the format {groupName1:[items2], groupname2:[items2]}\r\n     * @param addPrimitives If true, java primitives (int, double, char, etc) will be added, as well as `java.lang.String`\r\n     */\r\n    getTypeSelectorHTML(index: number, data: ParameterItem.TypeData, addPrimitives: boolean = false): string {\r\n        if (addPrimitives) {\r\n            data[\"Primitives\"] = JAVA_PRIMITIVES;\r\n        }\r\n        let out = `<select onChange=\"${this.parentDescriptor}.setType(${index}, this)\">\\n`;\r\n        for (let group of Object.keys(data)) {\r\n            out += `<optgroup label=\"${group}\">\\n`;\r\n            for (let element of data[group]) {\r\n                out += `<option value=\"${element.descriptor}\" ${this.type === element.descriptor ? \"selected\" : \"\"}>${element.name}</option>\\n`;\r\n            }\r\n            out += `</optgroup>\\n`;\r\n        }\r\n        out += \"</selector>\";\r\n        return out;\r\n    }\r\n\r\n    /**\r\n     * Get the HTML to render\r\n     * \r\n     * @param index The index in the parameters array\r\n     * @return The string representation of the HTML\r\n     */\r\n    getHTML(index:number): string{\r\n        return `\r\n        <div class=\"param\">\r\n            <div class=\"dragger\">&#9776;</div>\r\n            ${this.getTypeSelectorHTML(index, this.typeData)}\r\n            ${this.getInputHTML(index)}\r\n            <button type=\"button\" onclick=\"parameterSelectors[${this.parentIndex}].removeParam(${index})\">-</button>\r\n            <div class=\"notif\">&#9888; <span class=\"msg\">placeholder</span></div>\r\n        </div>`;\r\n    }\r\n\r\n    /**\r\n     * Get the HTML for the variable input section\r\n     * \r\n     * @param index The index in the parameters array\r\n     * @return The string representation of the HTML\r\n     */\r\n    abstract getInputHTML(index:number):string;\r\n    \r\n    /**\r\n     * Update the various listeners and references used by the parameter\r\n     * \r\n     * @param root The `.param` element \r\n     * @remark This function SHOULD NOT be overriden, instead use `onUpdate`, which is called by this function\r\n     */\r\n    update(root:HTMLElement):void {\r\n        this.root = root;\r\n        this.validator.update(root);\r\n\r\n        // Setup drag behaviour\r\n        this.dragger = root.querySelector(\".dragger\");\r\n        console.log(this.dragger);\r\n        this.dragger.onmousedown = (event) => {\r\n            console.log(\"Drag start\");\r\n            let movehandler = (event:MouseEvent)=>{\r\n                this.root.style.left = event.pageX.toString()+\"px\";\r\n                this.root.style.top = \"calc(\"+event.pageY.toString()+\"px - 2em)\";\r\n                this.parent.onDrag(event.pageY, this);\r\n            };\r\n            let upHandler = (event:MouseEvent)=>{\r\n                document.body.removeEventListener(\"mousemove\", movehandler);\r\n                document.body.removeEventListener(\"mouseup\", upHandler);\r\n                this.parent.onDrop(event.pageY, this);\r\n                this.root.style.position = \"initial\";\r\n                console.log(\"mouse up\");\r\n            };\r\n            document.body.addEventListener(\"mousemove\",movehandler);\r\n            document.body.addEventListener(\"mouseup\", upHandler);\r\n            \r\n            this.root.style.position = \"absolute\";\r\n            this.root.style.left = event.pageX.toString()+\"px\";\r\n            this.root.style.top = \"calc(\"+event.pageY.toString()+\"px - 2em)\";\r\n        };\r\n        this.onUpdate(root);\r\n    }\r\n\r\n    /**\r\n     * Set a propery on the parameter, should be called by `onchange`/`oninput` functions\r\n     * @param id The ID of the property\r\n     * @param value \r\n     */\r\n    abstract setProperty(id:string, value:any):void;\r\n\r\n    /**\r\n     * Update the various listeners and references used by the parameter, called by `update`\r\n     * \r\n     * @param root The `.param` element \r\n     */\r\n    abstract onUpdate(root:HTMLElement):void;\r\n\r\n    /**\r\n     * Get a descriptor for the parent element for the HTML\r\n     */\r\n    protected get parentDescriptor():string {\r\n        return `parameterSelectors[${this.parentIndex}]`;\r\n    }\r\n\r\n    abstract fromState(data: any): void;\r\n    abstract getState(): any;\r\n}\r\n\r\nexport namespace ParameterItem {\r\n    export interface TypeData {\r\n        [group:string]:Type[]\r\n    }\r\n    export interface Type {\r\n        descriptor:string, \r\n        name:string\r\n    }\r\n}\r\n\r\nexport class HardwareParameter extends ParameterItem {\r\n\r\n    name:string = \"\";\r\n    \r\n    input: HTMLInputElement;\r\n\r\n    constructor(parent:ParameterSelector){\r\n        super(parent, \r\n            new InputValidator(null, new EmptyTest(\".input\"))\r\n            .addTest(\"namechars\", new RegexTest(\".input\", \"Variable name can only contain alphanumeric characters\", 25, /^[A-Za-z0-9]*$/g))\r\n            .addTest(\"lowercase\", new RegexTest(\".input\", \"Variable name should start with a lowercase\", 15, /^[a-z]|^$/g)),\r\n            window.hardwareTypes);\r\n    }\r\n\r\n    getInputHTML(index: number): string {\r\n        return `<input class=\"input\" type=\"text\" value=\"${this.name}\" onChange=\"${this.parentDescriptor}.setProperty(${index}, 'name', this)\" />`;\r\n    }\r\n\r\n    setProperty(id: string, value: any): void {\r\n        if(id === \"name\"){\r\n            this.name = (<HTMLInputElement>value).value;\r\n        }\r\n    }\r\n\r\n    onUpdate(root: HTMLElement): void {        \r\n        this.input = root.querySelector(\".input\");\r\n        this.input.oninput = () => {\r\n            this.validator.validate(false);\r\n        };\r\n    }\r\n\r\n\r\n    fromState(data: {type:string, name:string}): void {\r\n        this.type = data.type;\r\n        this.name = data.name;\r\n    }\r\n\r\n    getState(): {type:string, name:string} {\r\n        return {\r\n            type:this.type,\r\n            name:this.name\r\n        };    \r\n    }\r\n\r\n}\r\n\r\ndeclare global {\r\n    interface Window {\r\n        hardwareTypes:ParameterItem.TypeData;\r\n        HardwareParameter: any;\r\n    }\r\n}\r\n\r\n// Parameter types need to be added to the window so they can be instantiated at runtime\r\nwindow.HardwareParameter = HardwareParameter;"],"sourceRoot":""}